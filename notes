
struct textBuffer
{
	//
};

void Insert(textBuffer *Buffer, char Char, int At)
void Insert(textBuffer *Buffer, const char *Text, int At)
Delete(textBuffer *Buffer, int At)
Delete(textBuffer *Buffer, int At, int NumChars)

int Cursor = GetCursor(Buffer);
int XIndex = GetCharIndex(Buffer, Cursor); // How many characters into the line are we
int YIndex = GetLineIndex(Buffer, Cursor); // How many lines into the text-buffer are we
// further calculate X and Y in pixels and window-coordinates

// 'a' 'b' 'c' '\0' '' '' '' -- cursor shouldnt go past '\0'

bool SetCursor(textBuffer *Buffer, int At) // We want to keep the inner implementation details separate from the public api so that we can change the buffer implementation without a need to modify any of the client code
int GetCursor(textBuffer *Buffer) // since we already have SetCursor()?
char GetChar(textBuffer *Buffer, int At) // unicode characters?

// if GetChar() returns '\0' we break out of the loop
for(int i = 0; (Char = GetChar(Buffer, i)); ++i){
	// do stuff with Char
}

TextBufferGetChar() vs GetChar() vs TextBuffer::GetChar()




---

enum widgetType
{
	BUTTON,
	EDITABLE_TEXT
};
struct widget
{
	int X, Y, W, H;
	widgetType Type;
};
struct button
{
	widget Widget;
	// Other fields specific to button
};
struct editableText
{
	widget Widget;
	// Other fields specific to editableText
};


widget *ActiveWidget = NULL;
array<widget *> Widgets;

for(int i = 0; i < Widgets.Count; ++i)
{
	if(is_hit(Widgets.Data[i], MouseCoordinates))
	{
		ActiveWidget = Widgets.Data[i];
	}
}

// But what if I want to access type specific fields of ActiveWidget?

---

widget *ActiveWidget;

void OnMouseEvent()
{
	// Call active widgets handlers
	switch(ActiveWidget->Type)
	{
		case BUTTON:
		{
			ButtonOnMouseEvent((button *)ActiveWidget);
		}
		case TEXT_ENTRY:
		{
			TextEntryOnMouseEvent((textEntry *)ActiveWidget);
		}
	}
}
void OnKeyEvent()
{
	// Call active widgets handlers
	switch(ActiveWidget->Type)
	{
		case TEXT_ENTRY:
		{
			TextEntryOnKeyEvent((textEntry *)ActiveWidget);
		}
	}
}

---
Why widgets need representation?

How to represent widgets?

1) One big struct for all widgets.

	struct widget
	{
		int Type; // button? text entry?
		// All fields for all widgets follow.
	};

	- Waste of memory.
	- Wouldn't it get confusing to sort out what fields what widgets use?
	+ Simplicity?

2) C++ inheritance

	struct widget
	{
		// Things all widgets have.
	}
	struct button: public widget
	{
		// Button specific things.
	}

	- Have to be mindful of performance cost?
	+ Very popular?

3) Some kind of C-style inheritance. Like X11 events? Using unions somehow?

	struct widget
	{
		// Things all widgets have.
		int Type;
		union
		{
			struct button Button;
			struct textEntry TextEntry;
		}
	};

4)
	struct button
	{
		// Things all widgets have.
		int Type;
		// Button specific things.
	}
	struct textEntry
	{
		// Things all widgets have.
		int Type;
		// Text entry specific things.
	}

	// but then I cant store them in 1 array
	// unless I store memory addresses as void pointers
	// but then how do I access things all widgets have?

---

BUILDING FOR MULTIPLE PLATFORMS (Linux and Windows)

Building on Linux for Linux and Windows.
Building on Windows for Linux and Windows.

Building on Linux for Linux.
	GCC defines __GNUC__.
	https://sourceforge.net/p/predef/wiki/Compilers/

Building on Windows for Windows.
	Visual Studio defines _WIN32.
	https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170&redirectedfrom=MSDN

GCC (on Linux) and TDM GCC (on Windows), because MSVC is not free (?)
most pedantic compiler flags everywhere

---
widget, gadget, uiElement, ...?

widgets can be active/current/selected/...?
input goes to active widget only?
blackandwhite'ing/outfocus'ing/darken'ing all other widgets?

are there different kinds of active?
	file opener pops up above other widgets
	file-edit/view widgets should be able to exist side by side?

editableTextMultiline
	left, right, up, down
	enter -> editing feature
	hor/ver scroll
	textBuffer

editableTextSingleline
	left, right
	enter -> process text input
	hor scroll
	textBuffer

scrollableList
	up, down
	enter -> select list item
	hor?/ver scroll
	list of items

fileOpener
	input is a path (directories as 'chunks'?)

---

* file opener
	adds a new file to a list of opened files
* file selecter
	(we have a list of opened files (with undo states etc.))
* symbol search (?)
	(search for files/functions/types/global variables?)
* simple text search?
* info bar/display?
	(appear/disappear?)
	line/column number, currently open file, programming language, tabs/spaces?, ascii/UTF8, current function/...?
---

multiple cursors seems like a good feature
some kind of pattern-based (very interactive) search and replace? (mvim)

placing the cursor with the mouse/touchpad
selecting text with the mouse
copy/cut/paste

ctrl + left/right up/down?

autocomplete?
undo

code highlighting

git?

---


FASTER TO DRAW IN BATCHES (?):

First, make vertices for all UIElements, then upload them all, then make a OpenGL(?) draw call.
If they use different shaders, they need to be drawn separately. (?)
So organize vertices into groups by shaders they use? Then make a separate draw call for each type of shader?
Is that it?


EFFICIENCY

There is no need to draw frames all the time (60 FPS). Most of the time, at least, redraw only needs to happen when a user event occurs (user presses a key, moves a mouse) or when we want to play an animation.
This means we could go sleep until next user-event comes in.
sleep -> handle user event -> play animation -> sleep


---

subpixel rendering