
struct textBuffer
{
	//
};

void Insert(textBuffer *Buffer, char Char, int At)
void Insert(textBuffer *Buffer, const char *Text, int At)
Delete(textBuffer *Buffer, int At)
Delete(textBuffer *Buffer, int At, int NumChars)

int Cursor = GetCursor(Buffer);
int XIndex = GetCharIndex(Buffer, Cursor); // How many characters into the line are we
int YIndex = GetLineIndex(Buffer, Cursor); // How many lines into the text-buffer are we
// further calculate X and Y in pixels and window-coordinates

// 'a' 'b' 'c' '\0' '' '' '' -- cursor shouldnt go past '\0'

bool SetCursor(textBuffer *Buffer, int At) // We want to keep the inner implementation details separate from the public api so that we can change the buffer implementation without a need to modify any of the client code
int GetCursor(textBuffer *Buffer) // since we already have SetCursor()?
char GetChar(textBuffer *Buffer, int At) // unicode characters?

// if GetChar() returns '\0' we break out of the loop
for(int i = 0; (Char = GetChar(Buffer, i)); ++i){
	// do stuff with Char
}

TextBufferGetChar() vs GetChar() vs TextBuffer::GetChar()




---

enum widgetType
{
	BUTTON,
	EDITABLE_TEXT
};
struct widget
{
	int X, Y, W, H;
	widgetType Type;
};
struct button
{
	widget Widget;
	// Other fields specific to button
};
struct editableText
{
	widget Widget;
	// Other fields specific to editableText
};


widget *ActiveWidget = NULL;
array<widget *> Widgets;

for(int i = 0; i < Widgets.Count; ++i)
{
	if(is_hit(Widgets.Data[i], MouseCoordinates))
	{
		ActiveWidget = Widgets.Data[i];
	}
}

// But what if I want to access type specific fields of ActiveWidget?

---

widget *ActiveWidget;

void OnMouseEvent()
{
	// Call active widgets handlers
	switch(ActiveWidget->Type)
	{
		case BUTTON:
		{
			ButtonOnMouseEvent((button *)ActiveWidget);
		}
		case TEXT_ENTRY:
		{
			TextEntryOnMouseEvent((textEntry *)ActiveWidget);
		}
	}
}
void OnKeyEvent()
{
	// Call active widgets handlers
	switch(ActiveWidget->Type)
	{
		case TEXT_ENTRY:
		{
			TextEntryOnKeyEvent((textEntry *)ActiveWidget);
		}
	}
}

---
Why widgets need representation?

How to represent widgets?

1) One big struct for all widgets.

	struct widget
	{
		int Type; // button? text entry?
		// All fields for all widgets follow.
	};

	- Waste of memory.
	- Wouldn't it get confusing to sort out what fields what widgets use?
	+ Simplicity?

2) C++ inheritance

	struct widget
	{
		// Things all widgets have.
	}
	struct button: public widget
	{
		// Button specific things.
	}

	- Have to be mindful of performance cost?
	+ Very popular?

3) Some kind of C-style inheritance. Like X11 events? Using unions somehow?

	struct widget
	{
		// Things all widgets have.
		int Type;
		union
		{
			struct button Button;
			struct textEntry TextEntry;
		}
	};

4)
	struct button
	{
		// Things all widgets have.
		int Type;
		// Button specific things.
	}
	struct textEntry
	{
		// Things all widgets have.
		int Type;
		// Text entry specific things.
	}

	// but then I cant store them in 1 array
	// unless I store memory addresses as void pointers
	// but then how do I access things all widgets have?


